template<int SZ> struct dijkstra {
    const int inf = 1e8;
    vector<pi> adj[SZ];
    int d[SZ];

    void addEdge(int u, int v, int l) {
        adj[u].pb(mp(v, l));
    }
    int dist(int v) {
        return d[v];
    }
    void build(int u) {
        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;
        M00(i, SZ) d[i] = inf;
        pq.push(mp(0, u));
        while(!pq.empty()) {
            pi t = pq.top(); pq.pop();
            if(d[t.s] != inf) continue;
            d[t.s] = t.f;

            for(auto v: adj[t.s]) {
                if(d[v.f] > d[t.s] + v.s) {
                    pq.push(mp(d[t.s]+v.s, v.f));
                }
            }
        }
    }
};
