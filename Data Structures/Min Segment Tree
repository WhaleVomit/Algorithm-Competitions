template<int SZ> struct mintree{
    node* root;
    mintree() {
        int ub = 1;
        while(ub < SZ) ub *= 2;
        root = new node(0, ub-1);
        root -> val = ((1<<30)-1)+(1<<30);
    }
    void updN(node* n, int pos, int val) {
        if(pos < n->l || pos > n->r) return;
        if(n->l == n->r) {
            n->val = val;
            return;
        }
        
        int mid = (n->l + n->r)/2;
        if(pos > mid) {
            if(n->right == nullptr) n->right = new node(mid+1, n->r), n->right->val = (1<<30)-1+(1<<30);
            updN(n->right, pos, val);
        }
        else {
            if(n->left == nullptr) n->left = new node(n->l, mid), n->left->val = (1<<30)-1+(1<<30);
            updN(n->left, pos, val);
        }
        
        int s = (1<<30)-1+(1<<30);
        if(n->left != nullptr) s = min(s, n->left->val);
        if(n->right != nullptr) s = min(s, n->right->val);
        
        n->val = s;
    }
    void upd(int pos, int val) {
        updN(root, pos, val);
    }
    int queryN(node* n, int i1, int i2) {
        if(i2 < n->l || i1 > n->r) return (1<<30)-1+(1<<30);
        if(n->l == n->r) return n->val;
        if(n->l >= i1 && n->r <= i2) return n->val;
        
        int s = (1<<30)-1+(1<<30);
        if(n->left != nullptr) s = min(s, queryN(n->left, i1, i2));
        if(n->right != nullptr) s = min(s, queryN(n->right, i1, i2));
        
        return s;
    }
    int query(int i1, int i2) {
        return queryN(root, i1, i2);
    }
};
