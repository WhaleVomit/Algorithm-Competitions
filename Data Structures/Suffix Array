template<int SZ> struct suffixArray {
    const static int LGSZ = 33-__builtin_clz(SZ-1);
    pair<pi, int> tup[SZ];
    int sortIndex[LGSZ][SZ];
    int res[SZ];
    int len;
    string ss;
    void build(string s) {
        this->ss = s;
        this->len = sz(s);
        M00(i, len) tup[i] = mp(mp((int)s[i], -1), i);
        sort(tup, tup+len);
        int temp = 0;
        tup[0].f.f = 0;
        MOO(i, 1, len) {
            if(s[tup[i].s] != s[tup[i-1].s]) temp++;
            tup[i].f.f = temp;
        }
        M00(i, len) sortIndex[0][tup[i].s] = tup[i].f.f;
        MOO(i, 1, LGSZ) {
            M00(j, len) tup[j] = mp(mp(sortIndex[i-1][j], (j+(1<<(i-1))<len)?sortIndex[i-1][j+(1<<(i-1))]:-1), j);
            sort(tup, tup+len);
            int temp2 = 0;
            sortIndex[i][tup[0].s] = 0;
            MOO(j, 1, len) {
                if(tup[j-1].f != tup[j].f) temp2++;
                sortIndex[i][tup[j].s] = temp2;
            }
        }
        M00(i, len) res[sortIndex[LGSZ-1][i]] = i;
    }
    int LCP(int x, int y) {
        if(x == y) return len - x;
        int ans = 0;
        M00d(i, LGSZ) {
            if(x >= len || y >= len) break;
            if(sortIndex[i][x] == sortIndex[i][y]) {
                x += (1<<i);
                y += (1<<i);
                ans += (1<<i);
            }
        }
        return ans;
    }
};
