struct node {
    int val;
    int l, r;
    node* left;
    node* right;
    node(int l, int r) {
        this -> val = 0;
        this -> l = l;
        this -> r = r;
        this -> left = nullptr;
        this -> right = nullptr;
    }
};

template<int SZ> struct sumtree{
    node* root;
    sumtree() {
        int ub = 1;
        while(ub < SZ) ub *= 2;
        root = new node(0, ub-1);
    }
    void updN(node* n, int pos, int val) {
        if(pos < n->l || pos > n->r) return;
        if(n->l == n->r) {
            n->val = val;
            return;
        }
        
        int mid = (n->l + n->r)/2;
        if(n->left == nullptr) n->left = new node(n->l, mid);
        if(n->right == nullptr) n-> right = new node(mid+1, n->r);
        
        updN(n->left, pos, val);
        updN(n->right, pos, val);
        n->val = n->left->val + n->right->val;
    }
    void upd(int pos, int val) {
        updN(root, pos, val);
    }
    int queryN(node* n, int i1, int i2) {
        if(i2 < n->l || i1 > n->r) return 0;
        if(n->l == n->r) return n->val;
        
        int mid = (n->l + n->r)/2;
        if(n->left == nullptr) n->left = new node(n->l, mid);
        if(n->right == nullptr) n->right = new node(mid+1, n->r);
        
        return queryN(n->left, i1, i2) + queryN(n->right, i1, i2);
    }
    int query(int i1, int i2) {
        return queryN(root, i1, i2);
    }
};
