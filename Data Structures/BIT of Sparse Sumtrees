struct st{
    node* root;
    st(int SZ) {
        int ub = 1;
        while(ub < SZ) ub *= 2;
        root = new node(0, ub-1);
    }
    void addN(node* n, int pos, int val) {
        if(pos < n->l || pos > n->r) return;
        if(n->l == n->r) {
            n->val += val;
            return;
        }
        
        int mid = (n->l + n->r)/2;
        if(n->left == nullptr) n->left = new node(n->l, mid);
        if(n->right == nullptr) n-> right = new node(mid+1, n->r);
        
        addN(n->left, pos, val);
        addN(n->right, pos, val);
        n->val = n->left->val + n->right->val;
    }
    void add(int pos, int val) {
        addN(root, pos, val);
    }
    int queryN(node* n, int i1, int i2) {
        if(i2 < n->l || i1 > n->r) return 0;
        if(n->l == n->r) return n->val;
        if(n->l >= i1 && n->r <= i2) return n->val;
        
        int mid = (n->l + n->r)/2;
        if(n->left == nullptr) n->left = new node(n->l, mid);
        if(n->right == nullptr) n->right = new node(mid+1, n->r);
        
        return queryN(n->left, i1, i2) + queryN(n->right, i1, i2);
    }
    int query(int i1, int i2) {
        return queryN(root, i1, i2);
    }
};

template<int w, int l> struct segbit {
    st* b[w+1];
    segbit() {
        M00(i, w+1) b[i] = new st(l);
    }
    void add(int x, int y, int val) {
        x++;
        for(; x <= w; x+=(x&-x)) b[x]->add(y, val);
    }
    int psum(int x, int y1, int y2) {
        int ret = 0;
        x++;
        for(; x>0; x-=(x&-x)) ret+=b[x]->query(y1, y2);
        return ret;
    }
    int sum(int x1, int y1, int x2, int y2) {
        return psum(x2, y1, y2) - psum(x1-1, y1, y2);
    }
};
