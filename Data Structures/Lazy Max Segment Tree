template<int SZ> struct lazymaxtree {
    node* root;
    lazymaxtree() {
        int ub = 1;
        while(ub < SZ) ub *= 2;
        root = new node(0, ub-1);
        root -> val = -(1<<30)+1-(1<<30);
        root -> lazy = -(1<<30)+1-(1<<30);
    }
    void propagate(node* n) {
        if(n->l != n->r) {
            int mid = ((n->l) + (n->r))/2;
            if(n->left == nullptr) {
                n->left = new node(n->l, mid);
                n->left->val = -(1<<30)+1-(1<<30);
                n->left->lazy = -(1<<30)+1-(1<<30);
            }
            if(n->right == nullptr) {
                n->right = new node(mid+1, n->r);
                n->right->val = -(1<<30)+1-(1<<30);
                n->right->lazy = -(1<<30)+1-(1<<30);
            }
        }
        if(n->lazy != -(1<<30)+1-(1<<30)) {
            n->val = n->lazy;
            if(n->l != n->r) {
                n->left->lazy = n->lazy;
                n->right->lazy = n->lazy;
            }
            n->lazy = -(1<<30)+1-(1<<30);
        }
    }
    void updN(node* n, int i1, int i2, int val) {
        propagate(n);
        if(i2 < n->l || i1 > n->r) return;
        if(n->l == n->r) {
            n->val = val;
            return;
        }
        if(i1 <= n->l && i2 >= n->r) {
            n->val = max(n->val, val);
            n->left->lazy = val;
            n->right->lazy = val;
            return;
        }
        
        updN(n->left, i1, i2, val);
        updN(n->right, i1, i2, val);
        n->val = max(n->left->val, n->right->val);
    }
    void upd(int i1, int i2, int val) {
        updN(root, i1, i2, val);
    }
    int queryN(node* n, int i1, int i2) {
        propagate(n);
        if(i2 < n->l || i1 > n->r) return -(1<<30)+1-(1<<30);
        if(n->l == n->r) {
            return n->val;
        }
        if(i1 <= n->l && i2 >= n->r) {
            return n->val;
        }
        
        return max(queryN(n->left, i1, i2), queryN(n->right, i1, i2));
    }
    int query(int i1, int i2) {
        return queryN(root, i1, i2);
    }
};
