template<int w, int h> struct DSU {
    pair<int, pi> e[w][h];
    DSU() {
        M00(i, w) M00(j, h) {
            e[i][j] = MP(1, MP(i, j));
        }
    }
    void clear() {
        M00(i, w) M00(j, h) {
            e[i][j] = MP(1, MP(i, j));
        }
    }
    pi get(pi x) {
        int i = x.F;
        int j = x.S;
        if(e[i][j].S != MP(i, j)) {
            e[i][j].S = get(e[i][j].S);
        }
        return e[i][j].S;
    }
    void unite(pi x, pi y) {
        x = get(x);
        y = get(y);
        if(x == y) return;
        pair<int, pi>& xp = e[x.F][x.S];
        pair<int, pi>& yp = e[y.F][y.S];
        if(xp.F < yp.F) swap(xp, yp), swap(x, y);
        xp.F += yp.F, yp.S = x;
    }
    bool connected(pi x, pi y) {
        x = get(x);
        y = get(y);
        return (x == y);
    }
    int s(pi x) { //size of component containing x
        x = get(x);
        return e[x.F][x.S].F;
    }
};
